Disruptor它适合一切异步环境，但是对于并发量小的场景不一定需要。在log4j2中，已经使用了disruptor进行
日志记录,同样是用异步，选择disruptor会更快。下面以简单场景举例：
 

停车批量入场数据上报，数据上报后需要对每条入场数据存入DB，还需要发送kafka消息给其他业务系统。
如果执行完所有的操作，再返回，那么接口耗时比较长，我们可以批量上报后验证数据正确性，
通过后按单条入场数据写入环形队列，然后直接返回成功。

实现方式一：启 动2个消费者线程，一个消费者去执行db入库，一个消费者去发送kafka消息。

实现方式二：启动4个消费者，2个消费者并发执行db入库，两个消费者并发发送kafka消息，
充分利用cpu多核特性，提高执行效率。

实现方式三：如果要求写入DB和kafka后，需要给用户发送短信。那么可以启动三个消费者线程，一个执行db插入，
一个执行kafka消息发布，最后一个依赖前两个线程执行成功，前两个线程都执行成功后，该线程执行短信发送。



使用步骤:
1定义事件
    InParkingDataEvent.java
2定义事件处理的具体实现
	ParkingDataInDbHandler.java
	ParkingDataSmsHandler.java
	ParkingDataToKafkaHandler.java
3.发布事件类实现(Disruptor 要求 RingBuffer.publish 必须得到调用，如果发生异常也一样要调用 publish，
    那么，很显然这个时候需要调用者在事件处理的实现上来判断事件携带的数据是否是正确的或者完整的)
    InParkingDataEventPublisher.java
4定义用于事件处理的线程池, 指定等待策略, 启动 Disruptor,执行完毕后关闭Disruptor
    Main.java